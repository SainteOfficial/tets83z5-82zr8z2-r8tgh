-- Mob Attack Script with Hitbox Expander
-- This script positions the player 15 studs above mobs and attacks them automatically
-- Also includes an advanced hitbox expander with GUI toggle

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Configuration
local HOVER_HEIGHT = 15 -- Height above mobs in studs
local ATTACK_DISTANCE = 40 -- Maximum distance to attack mobs
local HITBOX_SIZE_MULTIPLIER = 3 -- Size multiplier for hitbox expansion
local isAttacking = false
local isHitboxExpanded = false
local selectedMob = nil

-- Debug function
local function DebugPrint(message)
    print("[MOB ATTACKER] " .. message)
end

DebugPrint("Script started")

-- Create GUI for mobile controls
local function CreateGUI()
    DebugPrint("Creating GUI...")
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "MobAttackerGUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = Player:WaitForChild("PlayerGui")
    
    local Frame = Instance.new("Frame")
    Frame.Name = "ControlFrame"
    Frame.Size = UDim2.new(0, 200, 0, 100)
    Frame.Position = UDim2.new(0.8, -100, 0.8, -50)
    Frame.BackgroundTransparency = 0.5
    Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Frame.BorderSizePixel = 2
    Frame.BorderColor3 = Color3.fromRGB(255, 255, 255)
    Frame.Parent = ScreenGui
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "ToggleAttackButton"
    ToggleButton.Size = UDim2.new(0.9, 0, 0.4, 0)
    ToggleButton.Position = UDim2.new(0.05, 0, 0.05, 0)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Text = "Attack: OFF"
    ToggleButton.Font = Enum.Font.SourceSansBold
    ToggleButton.TextSize = 18
    ToggleButton.Parent = Frame
    
    local HitboxButton = Instance.new("TextButton")
    HitboxButton.Name = "HitboxButton"
    HitboxButton.Size = UDim2.new(0.9, 0, 0.4, 0)
    HitboxButton.Position = UDim2.new(0.05, 0, 0.55, 0)
    HitboxButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    HitboxButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    HitboxButton.Text = "Hitbox: OFF"
    HitboxButton.Font = Enum.Font.SourceSansBold
    HitboxButton.TextSize = 18
    HitboxButton.Parent = Frame
    
    -- Toggle attack button
    ToggleButton.MouseButton1Click:Connect(function()
        isAttacking = not isAttacking
        ToggleButton.Text = isAttacking and "Attack: ON" or "Attack: OFF"
        ToggleButton.BackgroundColor3 = isAttacking and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        DebugPrint("Attack toggled: " .. tostring(isAttacking))
    end)
    
    -- Toggle hitbox button
    HitboxButton.MouseButton1Click:Connect(function()
        isHitboxExpanded = not isHitboxExpanded
        HitboxButton.Text = isHitboxExpanded and "Hitbox: ON" or "Hitbox: OFF"
        HitboxButton.BackgroundColor3 = isHitboxExpanded and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        ToggleHitboxes(isHitboxExpanded)
        DebugPrint("Hitbox toggled: " .. tostring(isHitboxExpanded))
    end)
    
    DebugPrint("GUI created successfully")
    return ScreenGui
end

-- Function to find the closest mob
local function FindClosestMob()
    local Mobs = workspace:FindFirstChild("Mobs")
    if not Mobs then
        DebugPrint("Error: Mobs folder not found in workspace")
        return nil
    end
    
    local closestMob = nil
    local shortestDistance = ATTACK_DISTANCE
    
    for _, mob in pairs(Mobs:GetChildren()) do
        local mobRoot = mob:FindFirstChild("HumanoidRootPart")
        if mobRoot and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
            local distance = (HumanoidRootPart.Position - mobRoot.Position).Magnitude
            if distance < shortestDistance then
                closestMob = mob
                shortestDistance = distance
                DebugPrint("Found mob: " .. mob.Name .. " at distance: " .. tostring(distance))
            end
        end
    end
    
    if closestMob then
        DebugPrint("Selected mob: " .. closestMob.Name)
    else
        DebugPrint("No mobs found within range")
    end
    
    return closestMob
end

-- Function to handle hitbox expansion
local function ToggleHitboxes(enabled)
    local Mobs = workspace:FindFirstChild("Mobs")
    if not Mobs then
        DebugPrint("Error: Mobs folder not found in workspace")
        return
    end
    
    DebugPrint("Toggling hitboxes: " .. tostring(enabled))
    
    for _, mob in pairs(Mobs:GetChildren()) do
        local mobRoot = mob:FindFirstChild("HumanoidRootPart")
        if mobRoot then
            -- Reset size
            if not enabled then
                if mobRoot:FindFirstChild("OriginalSize") then
                    local originalSize = mobRoot:FindFirstChild("OriginalSize").Value
                    mobRoot.Size = originalSize
                    DebugPrint("Reset hitbox for " .. mob.Name)
                end
            -- Expand size
            else
                -- Store original size if not already stored
                if not mobRoot:FindFirstChild("OriginalSize") then
                    local originalSizeValue = Instance.new("Vector3Value")
                    originalSizeValue.Name = "OriginalSize"
                    originalSizeValue.Value = mobRoot.Size
                    originalSizeValue.Parent = mobRoot
                end
                
                -- Expand hitbox
                mobRoot.Size = mobRoot.Size * HITBOX_SIZE_MULTIPLIER
                DebugPrint("Expanded hitbox for " .. mob.Name .. " to " .. tostring(mobRoot.Size))
                
                -- Make hitbox transparent
                if mobRoot:IsA("BasePart") then
                    mobRoot.Transparency = 0.8
                    mobRoot.CanCollide = false
                end
            end
        end
    end
end

-- Function to position player above mob and attack
local function PositionAndAttack(mob)
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then
        DebugPrint("Error: Invalid mob or missing HumanoidRootPart")
        return
    end
    
    local mobRoot = mob:FindFirstChild("HumanoidRootPart")
    
    -- Position player above mob
    local targetPosition = mobRoot.Position + Vector3.new(0, HOVER_HEIGHT, 0)
    HumanoidRootPart.CFrame = CFrame.new(targetPosition) * CFrame.Angles(math.rad(90), 0, 0)
    
    -- Debug info
    DebugPrint("Positioned above " .. mob.Name .. " at height: " .. HOVER_HEIGHT)
    DebugPrint("Player position: " .. tostring(HumanoidRootPart.Position))
    DebugPrint("Mob position: " .. tostring(mobRoot.Position))
    
    -- Attack (simulate left click)
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
    wait(0.05)
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
    
    DebugPrint("Attack sent")
end

-- Enable flying for the player
local function EnableFly()
    DebugPrint("Enabling fly mode")
    
    -- Disable gravity
    Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    
    -- Set fly properties
    Humanoid.PlatformStand = true
    
    -- Make sure character can't fall
    for _, part in pairs(Character:GetChildren()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
    
    -- Set flying property
    Character:WaitForChild("HumanoidRootPart").Anchored = false
    
    DebugPrint("Fly mode enabled")
end

-- Main loop function
local function MainLoop()
    DebugPrint("Main loop started")
    
    while wait(0.1) do
        if isAttacking then
            selectedMob = FindClosestMob()
            
            if selectedMob then
                PositionAndAttack(selectedMob)
            else
                DebugPrint("No valid mob found to attack")
            end
        end
    end
end

-- Start the script
local function StartScript()
    DebugPrint("Initializing script...")
    
    local gui = CreateGUI()
    EnableFly()
    
    -- Start main loop
    spawn(MainLoop)
    
    -- Monitor for mobs
    RunService.Heartbeat:Connect(function()
        if isHitboxExpanded then
            -- Continuously check for new mobs to expand hitboxes
            local Mobs = workspace:FindFirstChild("Mobs")
            if Mobs then
                for _, mob in pairs(Mobs:GetChildren()) do
                    local mobRoot = mob:FindFirstChild("HumanoidRootPart")
                    if mobRoot and not mobRoot:FindFirstChild("OriginalSize") then
                        -- New mob found, expand its hitbox
                        local originalSizeValue = Instance.new("Vector3Value")
                        originalSizeValue.Name = "OriginalSize"
                        originalSizeValue.Value = mobRoot.Size
                        originalSizeValue.Parent = mobRoot
                        
                        -- Expand hitbox
                        mobRoot.Size = mobRoot.Size * HITBOX_SIZE_MULTIPLIER
                        if mobRoot:IsA("BasePart") then
                            mobRoot.Transparency = 0.8
                            mobRoot.CanCollide = false
                        end
                        
                        DebugPrint("Auto-expanded hitbox for new mob: " .. mob.Name)
                    end
                end
            end
        end
    end)
    
    DebugPrint("Script fully initialized")
end

-- Error handling wrapper
local success, error = pcall(function()
    StartScript()
end)

if not success then
    DebugPrint("Script error: " .. tostring(error))
end
