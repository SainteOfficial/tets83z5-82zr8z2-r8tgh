local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

-- Hauptfenster erstellen
local Window = Luna:CreateWindow({
    Name = "Anime Card Clash - MythHub",
    Subtitle = "v1.0",
    LogoID = nil, -- Kann später aktualisiert werden
    LoadingEnabled = true,
    LoadingTitle = "Anime Card Clash - MythHub",
    LoadingSubtitle = "by MythTeam",
    ConfigSettings = {
        RootFolder = nil,
        ConfigFolder = "AnimeCardClash_MythHub"
    },
    KeySystem = false
})

-- Dashboard Tab
local DashboardTab = Window:CreateTab({
    Name = "Dashboard",
    Icon = "dashboard",
    ImageSource = "Material",
    ShowTitle = true
})

-- AutoFarm Tab
local AutoFarmTab = Window:CreateTab({
    Name = "AutoFarm",
    Icon = "agriculture",
    ImageSource = "Material",
    ShowTitle = true
})

-- Towers Tab
local TowersTab = Window:CreateTab({
    Name = "Towers",
    Icon = "apartment",
    ImageSource = "Material",
    ShowTitle = true
})

-- Raids Tab
local RaidsTab = Window:CreateTab({
    Name = "Raids",
    Icon = "swords",
    ImageSource = "Lucide",
    ShowTitle = true
})

-- Exploration Tab
local ExplorationTab = Window:CreateTab({
    Name = "Exploration",
    Icon = "explore",
    ImageSource = "Material",
    ShowTitle = true
})

-- Shop Tab
local ShopTab = Window:CreateTab({
    Name = "Shop",
    Icon = "shopping_cart",
    ImageSource = "Material",
    ShowTitle = true
})

-- Misc Tab
local MiscTab = Window:CreateTab({
    Name = "Misc",
    Icon = "settings",
    ImageSource = "Material",
    ShowTitle = true
})

-- Dashboard Tab Inhalte
DashboardTab:CreateParagraph({
    Title = "Willkommen bei Anime Card Clash - MythHub",
    Text = "Dies ist ein umfassender Script Hub für Anime Card Clash. Entdecke automatisierte Funktionen für Farming, Towers, Raids und mehr!"
})

DashboardTab:CreateLabel({
    Text = "Entwickelt von MythTeam | Version 1.0",
    Style = 1
})

DashboardTab:CreateDivider()

-- Spieler-Status-Anzeige
DashboardTab:CreateSection("Spieler-Status")

-- Wir werden später eine Funktion implementieren, um diese Informationen dynamisch zu aktualisieren
local PlayerStatsLabel = DashboardTab:CreateLabel({
    Text = "Lade Spielerdaten...",
    Style = 1
})

DashboardTab:CreateDivider()

-- AutoFarm Tab Inhalte
AutoFarmTab:CreateSection("Enemy Farm")

-- Welten-Auswahl
local WorldDropdown = AutoFarmTab:CreateDropdown({
    Name = "Welt auswählen",
    Description = "Wähle die Welt, in der du farmen möchtest",
    Options = {"Ninja Village", "Green Village", "Shibuya Station", "Titans City", "Dimensional Fortress", "Candy Island", "Solo City"},
    CurrentOption = {"Ninja Village"},
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(Option)
        -- Wird später implementiert
        print("Welt ausgewählt: " .. Option[1])
    end
}, "WorldDropdown")

-- Gegner-Auswahl für die jeweilige Welt
local EnemyDropdown = AutoFarmTab:CreateDropdown({
    Name = "Gegner auswählen",
    Description = "Wähle den Gegner, den du farmen möchtest",
    Options = {"ROCK LEE", "KAKASHI", "SASUKE", "NARUTO SAGE MODE", "PAIN", "NARUTO RAGE MODE (BOSS)"},
    CurrentOption = {"ROCK LEE"},
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(Option)
        -- Wird später implementiert
        print("Gegner ausgewählt: " .. Option[1])
    end
}, "EnemyDropdown")

-- Auto Farm Toggle
local AutoFarmToggle = AutoFarmTab:CreateToggle({
    Name = "Auto Farm aktivieren",
    Description = "Automatisches Bekämpfen des ausgewählten Gegners",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            print("Auto Farm aktiviert")
            -- Hier kommt später die Farm-Logik
        else
            print("Auto Farm deaktiviert")
        end
    end
}, "AutoFarmToggle")

AutoFarmTab:CreateDivider()

-- Auto Pick-Up Items
AutoFarmTab:CreateSection("Auto Pick-Up Items")

local AutoPickupToggle = AutoFarmTab:CreateToggle({
    Name = "Auto Items Aufheben",
    Description = "Automatisches Aufheben von Items in der Spielwelt",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            print("Auto Pickup aktiviert")
            -- Implementierung folgt
        else
            print("Auto Pickup deaktiviert")
        end
    end
}, "AutoPickupToggle")

AutoFarmTab:CreateDivider()

-- Auto Merge
AutoFarmTab:CreateSection("Auto Merge")

local AutoMergeToggle = AutoFarmTab:CreateToggle({
    Name = "Auto Merge aktivieren",
    Description = "Automatisches Zusammenführen von Karten für Upgrades",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            print("Auto Merge aktiviert")
            -- Implementierung folgt
        else
            print("Auto Merge deaktiviert")
        end
    end
}, "AutoMergeToggle")

-- Towers Tab Inhalte
TowersTab:CreateSection("Battle Tower")

local BattleTowerLevelButton = TowersTab:CreateButton({
    Name = "Battle Tower Level prüfen",
    Description = "Zeigt dein aktuelles Battle Tower Level an",
    Callback = function()
        -- Implementierung des Level-Checks
        local function checkBattleTowerLevel()
            local LocalUserModule = game:GetService("ReplicatedStorage"):WaitForChild("TS"):WaitForChild("user"):WaitForChild("local"):WaitForChild("local-user")
            
            local success, result = pcall(function()
                local LocalUser = require(LocalUserModule).LocalUser
                local battleTowerWave = LocalUser.metadata:getAsNumber("battle_tower_wave")
                return battleTowerWave or 1
            end)
            
            if success then
                Luna:Notification({ 
                    Title = "Battle Tower Level",
                    Icon = "apartment",
                    ImageSource = "Material",
                    Content = "Dein aktuelles Battle Tower Level: " .. result
                })
                return result
            else
                Luna:Notification({ 
                    Title = "Fehler",
                    Icon = "error",
                    ImageSource = "Material",
                    Content = "Konnte Battle Tower Level nicht abrufen"
                })
                return 1
            end
        end
        
        checkBattleTowerLevel()
    end
})

local BattleTowerInput = TowersTab:CreateInput({
    Name = "Battle Tower Level",
    Description = "Gib das Level ein, das automatisch abgeschlossen werden soll (1-100)",
    PlaceholderText = "1-100",
    CurrentValue = "",
    Numeric = true,
    MaxCharacters = 3,
    Enter = true,
    Callback = function(Text)
        local level = tonumber(Text)
        if level and level >= 1 and level <= 100 then
            -- Battle Tower Level abschließen
            Luna:Notification({ 
                Title = "Battle Tower",
                Icon = "apartment",
                ImageSource = "Material",
                Content = "Starte Auto-Complete für Level " .. level
            })
            
            local args = {
                [1] = level
            }
            game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("c1438c4a-417f-41ee-9363-1ebabcc0bbd9"):FireServer(unpack(args))
        else
            Luna:Notification({ 
                Title = "Fehler",
                Icon = "error",
                ImageSource = "Material",
                Content = "Bitte gib ein gültiges Level zwischen 1 und 100 ein"
            })
        end
    end
}, "BattleTowerLevel")

TowersTab:CreateDivider()

TowersTab:CreateSection("Infinite Tower")

local InfiniteTowerStatus = TowersTab:CreateLabel({
    Text = "Status: Inaktiv",
    Style = 1
})

local InfiniteTowerControls = TowersTab:CreateDropdown({
    Name = "Infinite Tower Kontrolle",
    Description = "Starten, Pausieren oder Stoppen des Infinite Tower",
    Options = {"Starten", "Pausieren", "Stoppen"},
    CurrentOption = {"Starten"},
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(Option)
        if Option[1] == "Starten" then
            game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("888b9aa0-9ca6-4c77-9946-cebf1edf613d"):FireServer()
            InfiniteTowerStatus:Set({Text = "Status: Aktiv"})
        elseif Option[1] == "Pausieren" then
            game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("a8a25480-c0f3-426b-834f-0f95cf058edc"):FireServer()
            InfiniteTowerStatus:Set({Text = "Status: Pausiert"})
        elseif Option[1] == "Stoppen" then
            game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("179a96b5-b8d2-4156-a939-6f34c92aa7a6"):FireServer()
            InfiniteTowerStatus:Set({Text = "Status: Inaktiv"})
        end
    end
}, "InfiniteTowerControls")

local InfiniteTowerTrackerToggle = TowersTab:CreateToggle({
    Name = "Floor Tracker aktivieren",
    Description = "Verfolgt deinen aktuellen Floor im Infinite Tower",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            -- Tracker aktivieren
            Luna:Notification({ 
                Title = "Floor Tracker",
                Icon = "apartment",
                ImageSource = "Material",
                Content = "Floor Tracker aktiviert"
            })
            
            -- Implementierung folgt
        else
            -- Tracker deaktivieren
            Luna:Notification({ 
                Title = "Floor Tracker",
                Icon = "apartment",
                ImageSource = "Material",
                Content = "Floor Tracker deaktiviert"
            })
        end
    end
}, "InfiniteTowerTracker")

-- Raids Tab Inhalte
RaidsTab:CreateSection("Raid Manager")

local RaidButton = RaidsTab:CreateButton({
    Name = "Eternal Dragon Raid starten",
    Description = "Startet einen Eternal Dragon Raid",
    Callback = function()
        Luna:Notification({ 
            Title = "Raid",
            Icon = "swords",
            ImageSource = "Lucide",
            Content = "Starte Eternal Dragon Raid"
        })
        
        local args = {
            [1] = "eternal_dragon"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("9f262bf4-f76a-4916-94dc-46596cc25770"):FireServer(unpack(args))
    end
})

-- Exploration Tab Inhalte
ExplorationTab:CreateSection("Deploy System")

local ExpeditionDropdown = ExplorationTab:CreateDropdown({
    Name = "Schwierigkeit",
    Description = "Wähle die Schwierigkeit für deine Expedition",
    Options = {"Easy", "Medium", "Hard"},
    CurrentOption = {"Easy"},
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(Option)
        -- Wird später implementiert
        print("Schwierigkeit ausgewählt: " .. Option[1])
    end
}, "ExpeditionDifficulty")

local DeployButton = ExplorationTab:CreateButton({
    Name = "Deploy Team",
    Description = "Entsende dein Team auf Expedition",
    Callback = function()
        local difficulty = string.lower(ExpeditionDropdown.CurrentOption[1])
        
        -- Vordefinierte Teams für unterschiedliche Schwierigkeiten
        local teams = {
            easy = {
                [1] = "dark_avenger",
                [2] = "black_swordsman",
                [3] = "dark_avenger",
                [4] = "dark_avenger"
            },
            medium = {
                [1] = "bald_hero",
                [2] = "bald_hero",
                [3] = "bald_hero",
                [4] = "bald_hero"
            },
            hard = {
                [1] = "awakened_galactic_tyrant",
                [2] = "awakened_galactic_tyrant",
                [3] = "shadow_monarch:gold",
                [4] = "genie_commander"
            }
        }
        
        local args = {
            [1] = difficulty,
            [2] = teams[difficulty]
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("569ba6a6-d5ea-488e-b729-0f0b6dbaf40c"):FireServer(unpack(args))
        
        Luna:Notification({ 
            Title = "Expedition",
            Icon = "explore",
            ImageSource = "Material",
            Content = "Team für " .. difficulty:gsub("^%l", string.upper) .. " Expedition entsandt"
        })
    end
})

ExplorationTab:CreateDivider()

ExplorationTab:CreateSection("Claim System")

local ClaimEasyButton = ExplorationTab:CreateButton({
    Name = "Claim Easy Rewards",
    Description = "Sammle Belohnungen von Easy Expeditionen ein",
    Callback = function()
        local args = {
            [1] = "easy"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("e54723ed-0747-47de-9a09-3153dfb2acd7"):FireServer(unpack(args))
        
        Luna:Notification({ 
            Title = "Expedition",
            Icon = "explore",
            ImageSource = "Material",
            Content = "Easy Expedition Belohnungen eingesammelt"
        })
    end
})

local ClaimMediumButton = ExplorationTab:CreateButton({
    Name = "Claim Medium Rewards",
    Description = "Sammle Belohnungen von Medium Expeditionen ein",
    Callback = function()
        local args = {
            [1] = "medium"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("e54723ed-0747-47de-9a09-3153dfb2acd7"):FireServer(unpack(args))
        
        Luna:Notification({ 
            Title = "Expedition",
            Icon = "explore",
            ImageSource = "Material",
            Content = "Medium Expedition Belohnungen eingesammelt"
        })
    end
})

local ClaimHardButton = ExplorationTab:CreateButton({
    Name = "Claim Hard Rewards",
    Description = "Sammle Belohnungen von Hard Expeditionen ein",
    Callback = function()
        local args = {
            [1] = "hard"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("e54723ed-0747-47de-9a09-3153dfb2acd7"):FireServer(unpack(args))
        
        Luna:Notification({ 
            Title = "Expedition",
            Icon = "explore",
            ImageSource = "Material",
            Content = "Hard Expedition Belohnungen eingesammelt"
        })
    end
})

-- Shop Tab Inhalte
ShopTab:CreateSection("Auto Buy Potions")

local PotionTypes = {
    "raid_luck_potion",
    "raid_border_chance_potion",
    "raid_cooldown_potion",
    "raid_boss_chance_potion",
    "raid_moon_cycle_reroll_potion",
    "small_cooldown_reduction_potion",
    "small_luck_potion",
    "medium_luck_potion",
    "medium_cooldown_reduction_potion",
    "large_cooldown_reduction_potion",
    "large_luck_potion"
}

local PotionNames = {
    "Raid Luck Potion",
    "Raid Border Chance Potion",
    "Raid Cooldown Potion",
    "Raid Boss Chance Potion",
    "Raid Moon Cycle Reroll Potion",
    "Small Cooldown Reduction Potion",
    "Small Luck Potion",
    "Medium Luck Potion",
    "Medium Cooldown Reduction Potion",
    "Large Cooldown Reduction Potion",
    "Large Luck Potion"
}

local PotionDropdown = ShopTab:CreateDropdown({
    Name = "Trank auswählen",
    Description = "Wähle den Trank, den du kaufen möchtest",
    Options = PotionNames,
    CurrentOption = {PotionNames[1]},
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(Option)
        -- Wird beim Kauf verwendet
    end
}, "PotionDropdown")

local BuyButton = ShopTab:CreateButton({
    Name = "Trank kaufen",
    Description = "Kauft den ausgewählten Trank",
    Callback = function()
        local selectedPotion = PotionDropdown.CurrentOption[1]
        local potionIndex = table.find(PotionNames, selectedPotion)
        
        if potionIndex then
            local args = {
                [1] = PotionTypes[potionIndex],
                [2] = 1 -- Anzahl
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("54f5f951-af4e-447d-9ee4-c63d9130fe77"):FireServer(unpack(args))
            
            Luna:Notification({ 
                Title = "Shop",
                Icon = "shopping_cart",
                ImageSource = "Material",
                Content = selectedPotion .. " gekauft"
            })
        end
    end
})

local QuantitySlider = ShopTab:CreateSlider({
    Name = "Kaufmenge",
    Range = {1, 10},
    Increment = 1,
    CurrentValue = 1,
    Callback = function(Value)
        -- Wird für die Kaufmenge verwendet
    end
}, "PotionQuantity")

-- Misc Tab Inhalte
MiscTab:CreateSection("Auto Stats Upgrade")

local StatTypes = {
    "BOSS_CHANCE",
    "BORDER_CHANCE",
    "POTION_DURATION",
    "COOLDOWN_REDUCTION",
    "LUCK"
}

local StatNames = {
    "Boss Chance",
    "Border Chance",
    "Potion Duration",
    "Cooldown Reduction",
    "Luck"
}

local StatDropdown = MiscTab:CreateDropdown({
    Name = "Stat auswählen",
    Description = "Wähle den Stat, den du verbessern möchtest",
    Options = StatNames,
    CurrentOption = {StatNames[1]},
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(Option)
        -- Wird beim Upgrade verwendet
    end
}, "StatDropdown")

local UpgradeButton = MiscTab:CreateButton({
    Name = "Stat verbessern",
    Description = "Verbessert den ausgewählten Stat",
    Callback = function()
        local selectedStat = StatDropdown.CurrentOption[1]
        local statIndex = table.find(StatNames, selectedStat)
        
        if statIndex then
            local args = {
                [1] = StatTypes[statIndex]
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("af785685-b79a-4491-8d84-e3b637aa6fc5"):FireServer(unpack(args))
            
            Luna:Notification({ 
                Title = "Stat Upgrade",
                Icon = "trending_up",
                ImageSource = "Material",
                Content = selectedStat .. " wurde verbessert"
            })
        end
    end
})

local CheckPointsButton = MiscTab:CreateButton({
    Name = "Verfügbare Punkte prüfen",
    Description = "Zeigt die Anzahl deiner verfügbaren Upgrade-Punkte an",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local success, result = pcall(function()
            local LocalUser = require(ReplicatedStorage:WaitForChild("TS"):WaitForChild("user"):WaitForChild("local"):WaitForChild("local-user")).LocalUser
            return LocalUser.upgrades:getCards()
        end)
        
        if success then
            Luna:Notification({ 
                Title = "Upgrade Points",
                Icon = "stars",
                ImageSource = "Material",
                Content = "Du hast " .. result .. " Upgrade-Punkte verfügbar!"
            })
        else
            Luna:Notification({ 
                Title = "Error",
                Icon = "error",
                ImageSource = "Material",
                Content = "Konnte Upgrade-Punkte nicht abrufen"
            })
        end
    end
})

MiscTab:CreateDivider()

-- UI Einstellungen
MiscTab:BuildThemeSection()

-- Konfigurations-Einstellungen am Ende hinzufügen
MiscTab:BuildConfigSection()

-- Auto-Load Konfiguration
Luna:LoadAutoloadConfig()
