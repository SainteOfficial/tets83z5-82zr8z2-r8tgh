--[[
    Remote Spy (RSpY) für Roblox
    Zeigt alle RemoteEvents und RemoteFunctions an, mit Ausnahme der ignorierten Events
]]

-- Einstellungen
local settings = {
    ignoreList = {
        ["ReplicatedStorage.Events.HiNoob"] = true,
        ["ReplicatedStorage.Events.Combat"] = true
    },
    saveRemoteCalls = true,       -- Speichert alle Remote-Aufrufe
    maxSavedCalls = 100,          -- Maximale Anzahl gespeicherter Aufrufe
    guiEnabled = true,            -- GUI für Benutzeroberfläche aktivieren
    printToConsole = true,        -- Ausgabe in der Konsole anzeigen
    includeArguments = true       -- Argumente der Remote-Aufrufe anzeigen
}

-- Hauptklasse für Remote Spy
local RSpY = {}
RSpY.remotes = {}
RSpY.logs = {}
RSpY.gui = nil
RSpY.logCount = 0

-- Hilfsfunktionen
local function getRemotePath(remote)
    local path = remote.Name
    local parent = remote.Parent
    
    while parent and parent ~= game do
        path = parent.Name .. "." .. path
        parent = parent.Parent
    end
    
    return path
end

local function isRemoteIgnored(remote)
    local path = getRemotePath(remote)
    return settings.ignoreList[path] ~= nil
end

local function getTableString(tbl, depth)
    depth = depth or 0
    
    if depth > 3 then
        return "{...}" -- Begrenze die Tiefe, um endlose Rekursion zu vermeiden
    end
    
    local result = "{"
    local indent = string.rep("    ", depth + 1)
    local closeIndent = string.rep("    ", depth)
    local isFirst = true
    
    for k, v in pairs(tbl) do
        if not isFirst then
            result = result .. ","
        end
        
        result = result .. "\n" .. indent
        
        -- Schlüssel darstellen
        if type(k) == "string" then
            result = result .. '["' .. k .. '"] = '
        else
            result = result .. "[" .. tostring(k) .. "] = "
        end
        
        -- Wert darstellen
        if type(v) == "table" then
            result = result .. getTableString(v, depth + 1)
        elseif type(v) == "string" then
            result = result .. '"' .. v .. '"'
        elseif type(v) == "function" then
            result = result .. "function(...)"
        elseif type(v) == "userdata" then
            result = result .. tostring(v)
        else
            result = result .. tostring(v)
        end
        
        isFirst = false
    end
    
    if not isFirst then
        result = result .. "\n" .. closeIndent
    end
    
    return result .. "}"
end

local function formatValue(value)
    if type(value) == "table" then
        return getTableString(value)
    elseif type(value) == "string" then
        return '"' .. value .. '"'
    elseif type(value) == "function" then
        return "function(...)"
    elseif type(value) == "userdata" then
        return tostring(value)
    else
        return tostring(value)
    end
end

-- Hilfsfunktion für das Kopieren der Argumente
local function getArgsString(args)
    if not args or #args == 0 then
        return ""
    end
    
    local result = ""
    for i, arg in ipairs(args) do
        if i > 1 then
            result = result .. ", "
        end
        
        if type(arg) == "string" then
            result = result .. '"' .. arg .. '"'
        elseif type(arg) == "table" then
            result = result .. getTableString(arg)
        else
            result = result .. tostring(arg)
        end
    end
    
    return result
end

-- Logs formatieren
local function addToLogs(remoteType, remote, args, returnValue)
    if not settings.saveRemoteCalls then return end
    
    RSpY.logCount = RSpY.logCount + 1
    
    local log = {
        id = RSpY.logCount,
        timestamp = os.time(),
        type = remoteType,
        path = getRemotePath(remote),
        remote = remote,
        args = settings.includeArguments and args or nil
    }
    
    if returnValue ~= nil then
        log.returnValue = returnValue
    end
    
    -- Begrenze die Anzahl der Logs
    while #RSpY.logs >= settings.maxSavedCalls do
        table.remove(RSpY.logs, 1)
    end
    
    table.insert(RSpY.logs, log)
    
    if settings.printToConsole then
        local argsStr = ""
        if settings.includeArguments and args then
            for i, arg in ipairs(args) do
                argsStr = argsStr .. formatValue(arg)
                if i < #args then
                    argsStr = argsStr .. ", "
                end
            end
        end
        
        print(string.format("[RSpY] %s: %s(%s)", remoteType, log.path, argsStr))
        
        if returnValue ~= nil then
            print("   → Return:", formatValue(returnValue))
        end
    end
    
    -- GUI aktualisieren, falls vorhanden
    if RSpY.gui and RSpY.gui.Frame.Visible then
        RSpY.updateGUI()
    end
end

-- Hooks für RemoteEvents und RemoteFunctions
local function hookRemoteEvent(remote)
    if isRemoteIgnored(remote) then return end
    
    local originalFireServer = remote.FireServer
    remote.FireServer = function(self, ...)
        local args = {...}
        addToLogs("RemoteEvent", remote, args)
        return originalFireServer(self, ...)
    end
    
    RSpY.remotes[remote] = "RemoteEvent"
end

local function hookRemoteFunction(remote)
    if isRemoteIgnored(remote) then return end
    
    local originalInvokeServer = remote.InvokeServer
    remote.InvokeServer = function(self, ...)
        local args = {...}
        local returnValue = {originalInvokeServer(self, ...)}
        addToLogs("RemoteFunction", remote, args, returnValue)
        return unpack(returnValue)
    end
    
    RSpY.remotes[remote] = "RemoteFunction"
end

-- Hook für neue Remotes
local function hookNewRemote(instance)
    if instance:IsA("RemoteEvent") then
        hookRemoteEvent(instance)
    elseif instance:IsA("RemoteFunction") then
        hookRemoteFunction(instance)
    end
end

-- GUI erstellen
local function createGUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "RSpYGUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.DisplayOrder = 999
    
    local Frame = Instance.new("Frame")
    Frame.Name = "Frame"
    Frame.Size = UDim2.new(0.6, 0, 0.7, 0)
    Frame.Position = UDim2.new(0.2, 0, 0.15, 0)
    Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Frame.BorderSizePixel = 0
    Frame.Visible = false
    Frame.Parent = ScreenGui
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, 0, 0.05, 0)
    Title.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 16
    Title.Text = "Remote Spy (RSpY)"
    Title.BorderSizePixel = 0
    Title.Parent = Frame
    
    local Close = Instance.new("TextButton")
    Close.Name = "Close"
    Close.Size = UDim2.new(0.05, 0, 1, 0)
    Close.Position = UDim2.new(0.95, 0, 0, 0)
    Close.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    Close.TextColor3 = Color3.fromRGB(255, 255, 255)
    Close.Text = "X"
    Close.BorderSizePixel = 0
    Close.Parent = Title
    Close.MouseButton1Click:Connect(function()
        Frame.Visible = false
    end)
    
    local Tabs = Instance.new("Frame")
    Tabs.Name = "Tabs"
    Tabs.Size = UDim2.new(1, 0, 0.05, 0)
    Tabs.Position = UDim2.new(0, 0, 0.05, 0)
    Tabs.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    Tabs.BorderSizePixel = 0
    Tabs.Parent = Frame
    
    local LogsTab = Instance.new("TextButton")
    LogsTab.Name = "LogsTab"
    LogsTab.Size = UDim2.new(0.33, 0, 1, 0)
    LogsTab.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    LogsTab.TextColor3 = Color3.fromRGB(255, 255, 255)
    LogsTab.Text = "Logs"
    LogsTab.BorderSizePixel = 0
    LogsTab.Parent = Tabs
    
    local RemotesTab = Instance.new("TextButton")
    RemotesTab.Name = "RemotesTab"
    RemotesTab.Size = UDim2.new(0.33, 0, 1, 0)
    RemotesTab.Position = UDim2.new(0.33, 0, 0, 0)
    RemotesTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    RemotesTab.TextColor3 = Color3.fromRGB(255, 255, 255)
    RemotesTab.Text = "Remotes"
    RemotesTab.BorderSizePixel = 0
    RemotesTab.Parent = Tabs
    
    local SettingsTab = Instance.new("TextButton")
    SettingsTab.Name = "SettingsTab"
    SettingsTab.Size = UDim2.new(0.33, 0, 1, 0)
    SettingsTab.Position = UDim2.new(0.66, 0, 0, 0)
    SettingsTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    SettingsTab.TextColor3 = Color3.fromRGB(255, 255, 255)
    SettingsTab.Text = "Einstellungen"
    SettingsTab.BorderSizePixel = 0
    SettingsTab.Parent = Tabs
    
    local Content = Instance.new("Frame")
    Content.Name = "Content"
    Content.Size = UDim2.new(1, 0, 0.9, 0)
    Content.Position = UDim2.new(0, 0, 0.1, 0)
    Content.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Content.BorderSizePixel = 0
    Content.Parent = Frame
    
    local LogsFrame = Instance.new("ScrollingFrame")
    LogsFrame.Name = "LogsFrame"
    LogsFrame.Size = UDim2.new(1, 0, 1, 0)
    LogsFrame.BackgroundTransparency = 1
    LogsFrame.ScrollBarThickness = 6
    LogsFrame.Visible = true
    LogsFrame.Parent = Content
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Parent = LogsFrame
    
    local RemotesFrame = Instance.new("ScrollingFrame")
    RemotesFrame.Name = "RemotesFrame"
    RemotesFrame.Size = UDim2.new(1, 0, 1, 0)
    RemotesFrame.BackgroundTransparency = 1
    RemotesFrame.ScrollBarThickness = 6
    RemotesFrame.Visible = false
    RemotesFrame.Parent = Content
    
    local RemotesUIListLayout = Instance.new("UIListLayout")
    RemotesUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    RemotesUIListLayout.Parent = RemotesFrame
    
    local SettingsFrame = Instance.new("Frame")
    SettingsFrame.Name = "SettingsFrame"
    SettingsFrame.Size = UDim2.new(1, 0, 1, 0)
    SettingsFrame.BackgroundTransparency = 1
    SettingsFrame.Visible = false
    SettingsFrame.Parent = Content
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "RSpYToggle"
    ToggleButton.Size = UDim2.new(0, 100, 0, 30)
    ToggleButton.Position = UDim2.new(0, 20, 0, 20)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Text = "RSpY"
    ToggleButton.BorderSizePixel = 1
    ToggleButton.BorderColor3 = Color3.fromRGB(100, 100, 100)
    ToggleButton.Parent = ScreenGui
    
    ToggleButton.MouseButton1Click:Connect(function()
        Frame.Visible = not Frame.Visible
    end)
    
    LogsTab.MouseButton1Click:Connect(function()
        LogsTab.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        RemotesTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        SettingsTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        LogsFrame.Visible = true
        RemotesFrame.Visible = false
        SettingsFrame.Visible = false
    end)
    
    RemotesTab.MouseButton1Click:Connect(function()
        LogsTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        RemotesTab.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        SettingsTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        LogsFrame.Visible = false
        RemotesFrame.Visible = true
        SettingsFrame.Visible = false
        RSpY.updateRemotesList()
    end)
    
    SettingsTab.MouseButton1Click:Connect(function()
        LogsTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        RemotesTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        SettingsTab.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        LogsFrame.Visible = false
        RemotesFrame.Visible = false
        SettingsFrame.Visible = true
    end)
    
    ScreenGui.Parent = game:GetService("CoreGui")
    
    return {
        ScreenGui = ScreenGui,
        Frame = Frame,
        LogsFrame = LogsFrame,
        RemotesFrame = RemotesFrame,
        SettingsFrame = SettingsFrame
    }
end

-- GUI-Funktionen
function RSpY.updateGUI()
    if not RSpY.gui or not RSpY.gui.LogsFrame then return end
    
    -- Logs aktualisieren
    local logsFrame = RSpY.gui.LogsFrame
    for _, child in ipairs(logsFrame:GetChildren()) do
        if child:IsA("Frame") then
            child:Destroy()
        end
    end
    
    for i = #RSpY.logs, 1, -1 do
        local log = RSpY.logs[i]
        
        local logEntry = Instance.new("Frame")
        logEntry.Name = "Log_" .. log.id
        logEntry.Size = UDim2.new(1, 0, 0, 40)
        logEntry.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        logEntry.BorderSizePixel = 1
        logEntry.BorderColor3 = Color3.fromRGB(60, 60, 60)
        logEntry.LayoutOrder = -log.id
        
        local typeColor
        if log.type == "RemoteEvent" then
            typeColor = Color3.fromRGB(255, 165, 0) -- Orange für Events
        else
            typeColor = Color3.fromRGB(0, 191, 255) -- Blau für Functions
        end
        
        local typeLabel = Instance.new("TextLabel")
        typeLabel.Size = UDim2.new(0.15, 0, 1, 0)
        typeLabel.BackgroundTransparency = 1
        typeLabel.TextColor3 = typeColor
        typeLabel.Text = log.type
        typeLabel.TextSize = 14
        typeLabel.TextXAlignment = Enum.TextXAlignment.Center
        typeLabel.Parent = logEntry
        
        local pathLabel = Instance.new("TextLabel")
        pathLabel.Size = UDim2.new(0.85, 0, 0.5, 0)
        pathLabel.Position = UDim2.new(0.15, 0, 0, 0)
        pathLabel.BackgroundTransparency = 1
        pathLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        pathLabel.Text = log.path
        pathLabel.TextSize = 14
        pathLabel.TextXAlignment = Enum.TextXAlignment.Left
        pathLabel.Parent = logEntry
        
        local argsLabel = Instance.new("TextLabel")
        argsLabel.Size = UDim2.new(0.85, 0, 0.5, 0)
        argsLabel.Position = UDim2.new(0.15, 0, 0.5, 0)
        argsLabel.BackgroundTransparency = 1
        argsLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        
        if log.args and #log.args > 0 then
            local argsText = "Args: "
            for i, arg in ipairs(log.args) do
                if i > 1 then argsText = argsText .. ", " end
                if type(arg) == "table" then
                    argsText = argsText .. "{...}"
                elseif type(arg) == "string" then
                    if #arg > 20 then
                        argsText = argsText .. '"' .. string.sub(arg, 1, 20) .. '..."'
                    else
                        argsText = argsText .. '"' .. arg .. '"'
                    end
                else
                    argsText = argsText .. tostring(arg)
                end
                
                if i >= 3 and #log.args > 3 then
                    argsText = argsText .. ", ... [" .. (#log.args - 3) .. " more]"
                    break
                end
            end
            argsLabel.Text = argsText
        else
            argsLabel.Text = "Keine Argumente"
        end
        
        argsLabel.TextSize = 12
        argsLabel.TextXAlignment = Enum.TextXAlignment.Left
        argsLabel.Parent = logEntry
        
        local copyButton = Instance.new("TextButton")
        copyButton.Size = UDim2.new(0, 20, 0, 20)
        copyButton.Position = UDim2.new(1, -25, 0, 10)
        copyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        copyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        copyButton.Text = "C"
        copyButton.BorderSizePixel = 1
        copyButton.BorderColor3 = Color3.fromRGB(100, 100, 100)
        copyButton.Parent = logEntry
        
        copyButton.MouseButton1Click:Connect(function()
            local code = ""
            if log.type == "RemoteEvent" then
                code = string.format('game:GetService("ReplicatedStorage"):WaitForChild("%s"):FireServer(%s)', log.path, getArgsString(log.args))
            else
                code = string.format('game:GetService("ReplicatedStorage"):WaitForChild("%s"):InvokeServer(%s)', log.path, getArgsString(log.args))
            end
            setclipboard(code)
        end)
        
        logEntry.Parent = logsFrame
    end
end

function RSpY.updateRemotesList()
    if not RSpY.gui or not RSpY.gui.RemotesFrame then return end
    
    -- Remotes-Liste aktualisieren
    local remotesFrame = RSpY.gui.RemotesFrame
    for _, child in ipairs(remotesFrame:GetChildren()) do
        if child:IsA("Frame") then
            child:Destroy()
        end
    end
    
    local sortedRemotes = {}
    for remote, remoteType in pairs(RSpY.remotes) do
        table.insert(sortedRemotes, {
            remote = remote,
            type = remoteType,
            path = getRemotePath(remote)
        })
    end
    
    table.sort(sortedRemotes, function(a, b)
        return a.path < b.path
    end)
    
    for i, remoteInfo in ipairs(sortedRemotes) do
        local remoteEntry = Instance.new("Frame")
        remoteEntry.Name = "Remote_" .. i
        remoteEntry.Size = UDim2.new(1, 0, 0, 30)
        remoteEntry.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        remoteEntry.BorderSizePixel = 1
        remoteEntry.BorderColor3 = Color3.fromRGB(60, 60, 60)
        
        local typeColor
        if remoteInfo.type == "RemoteEvent" then
            typeColor = Color3.fromRGB(255, 165, 0) -- Orange für Events
        else
            typeColor = Color3.fromRGB(0, 191, 255) -- Blau für Functions
        end
        
        local typeLabel = Instance.new("TextLabel")
        typeLabel.Size = UDim2.new(0.15, 0, 1, 0)
        typeLabel.BackgroundTransparency = 1
        typeLabel.TextColor3 = typeColor
        typeLabel.Text = remoteInfo.type
        typeLabel.TextSize = 14
        typeLabel.TextXAlignment = Enum.TextXAlignment.Center
        typeLabel.Parent = remoteEntry
        
        local pathLabel = Instance.new("TextLabel")
        pathLabel.Size = UDim2.new(0.85, 0, 1, 0)
        pathLabel.Position = UDim2.new(0.15, 0, 0, 0)
        pathLabel.BackgroundTransparency = 1
        pathLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        pathLabel.Text = remoteInfo.path
        pathLabel.TextSize = 14
        pathLabel.TextXAlignment = Enum.TextXAlignment.Left
        pathLabel.Parent = remoteEntry
        
        remoteEntry.Parent = remotesFrame
    end
end

-- Initialisierung
function RSpY.init()
    print("Remote Spy (RSpY) wird gestartet...")
    
    -- GUI erstellen, wenn aktiviert
    if settings.guiEnabled then
        RSpY.gui = createGUI()
    end
    
    -- Vorhandene Remotes finden und hooking
    local function scanInstance(instance)
        for _, child in ipairs(instance:GetChildren()) do
            if child:IsA("RemoteEvent") then
                hookRemoteEvent(child)
            elseif child:IsA("RemoteFunction") then
                hookRemoteFunction(child)
            end
            
            scanInstance(child)
        end
    end
    
    scanInstance(game:GetService("ReplicatedStorage"))
    
    -- Auf neue Remotes überwachen
    game.DescendantAdded:Connect(function(instance)
        if instance:IsA("RemoteEvent") or instance:IsA("RemoteFunction") then
            hookNewRemote(instance)
        end
    end)
    
    print("Remote Spy (RSpY) wurde gestartet! " .. tostring(table.getn(RSpY.remotes)) .. " Remotes wurden gefunden.")
end

-- Starte Remote Spy
RSpY.init()

return RSpY
