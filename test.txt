-- Luna Interface Suite loader
local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

-- Create window with MythHub branding
local Window = Luna:CreateWindow({
    Name = "Anime Card Clash - MythHub", 
    Subtitle = "v1.0",
    LogoID = nil, 
    LoadingEnabled = true,
    LoadingTitle = "Anime Card Clash",
    LoadingSubtitle = "MythHub Loading...",
    
    ConfigSettings = {
        ConfigFolder = "MythHub_AnimeCardClash"
    },
    
    KeySystem = false
})

-- ###################### DASHBOARD TAB ######################
local DashboardTab = Window:CreateTab({
    Name = "Dashboard",
    Icon = "home", -- Simple icon without spaces
    ImageSource = "Material", -- Important: Must specify "Material" as source
    ShowTitle = true
})

-- Welcome paragraph
DashboardTab:CreateParagraph({
    Title = "Welcome to MythHub", 
    Text = "This hub provides enhanced features for Anime Card Clash. Select any tab to get started."
})

-- Status labels
local autoFarmStatusLabel = DashboardTab:CreateLabel({
    Text = "AutoFarm Status: Disabled",
    Style = 1
})

local autoTowerStatusLabel = DashboardTab:CreateLabel({
    Text = "AutoTower Status: Disabled",
    Style = 1
})

-- News & Updates
DashboardTab:CreateParagraph({
    Title = "News & Updates", 
    Text = "Version 1.0 released! New features coming soon."
})

-- ###################### AUTOFARM TAB ######################
local AutoFarmTab = Window:CreateTab({
    Name = "‚öîÔ∏è AutoFarm",
    Icon = "bolt", -- Simple icon without spaces
    ImageSource = "Material",
    ShowTitle = true
})

-- Target Type Section
AutoFarmTab:CreateSection("Target Type")

-- Target Type Toggles
local allEnemiesToggle = AutoFarmTab:CreateToggle({
    Name = "üîò All Enemies",
    Description = "Targets all nearby enemies",
    CurrentValue = true,
    Callback = function(Value)
        if Value then
            -- If this toggle is activated, deactivate the boss-only toggle
            if bossOnlyToggle and bossOnlyToggle.CurrentValue then
                bossOnlyToggle:Set({CurrentValue = false})
            end
            -- Update AutoFarm status in Dashboard
            autoFarmStatusLabel:Set({Text = "AutoFarm Status: All Enemies"})
        elseif not (bossOnlyToggle and bossOnlyToggle.CurrentValue) then
            -- If both toggles are deactivated, set status to Disabled
            autoFarmStatusLabel:Set({Text = "AutoFarm Status: Disabled"})
        end
    end
}, "AllEnemiesToggle")

local bossOnlyToggle = AutoFarmTab:CreateToggle({
    Name = "üîò Bosses Only",
    Description = "Targets bosses only",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            -- If this toggle is activated, deactivate the All-Enemies toggle
            if allEnemiesToggle and allEnemiesToggle.CurrentValue then
                allEnemiesToggle:Set({CurrentValue = false})
            end
            -- Update AutoFarm status in Dashboard
            autoFarmStatusLabel:Set({Text = "AutoFarm Status: Bosses Only"})
        elseif not (allEnemiesToggle and allEnemiesToggle.CurrentValue) then
            -- If both toggles are deactivated, set status to Disabled
            autoFarmStatusLabel:Set({Text = "AutoFarm Status: Disabled"})
        end
    end
}, "BossOnlyToggle")

-- Map Selection Section
AutoFarmTab:CreateSection("Map Selection")

-- Map Selection Toggles
local allMapsToggle = AutoFarmTab:CreateToggle({
    Name = "üîò All Maps",
    Description = "Farm on all available maps",
    CurrentValue = true,
    Callback = function(Value)
        if Value then
            -- If this toggle is activated, deactivate the Specific Maps dropdown
            specificMapsDropdown:Set({Interaction = not Value})
        end
    end
}, "AllMapsToggle")

-- Example maps for dropdown
local mapOptions = {"Map 1", "Map 2", "Map 3", "Map 4", "Map 5"}

local specificMapsDropdown = AutoFarmTab:CreateDropdown({
    Name = "üîò Specific Maps",
    Description = "Select specific maps for farming",
    Options = mapOptions,
    CurrentOption = {"Map 1"},
    MultipleOptions = true,
    SpecialType = nil,
    Interaction = false, -- Disabled when "All Maps" is enabled
    Callback = function(Options)
        -- Implement map selection logic here
    end
}, "SpecificMapsDropdown")

-- Start/Stop Button for Farming
local farmingActive = false
local farmingButton = AutoFarmTab:CreateButton({
    Name = "Start Farming",
    Description = "Start or stop the AutoFarm process",
    Callback = function()
        farmingActive = not farmingActive
        
        if farmingActive then
            farmingButton:Set({Name = "Stop Farming"})
            -- Implement farming logic here
            -- Update status in Dashboard
            if allEnemiesToggle.CurrentValue then
                autoFarmStatusLabel:Set({Text = "AutoFarm Status: All Enemies (Active)"})
            elseif bossOnlyToggle.CurrentValue then
                autoFarmStatusLabel:Set({Text = "AutoFarm Status: Bosses Only (Active)"})
            end
        else
            farmingButton:Set({Name = "Start Farming"})
            -- Stop farming here
            -- Update status in Dashboard
            if allEnemiesToggle.CurrentValue then
                autoFarmStatusLabel:Set({Text = "AutoFarm Status: All Enemies"})
            elseif bossOnlyToggle.CurrentValue then
                autoFarmStatusLabel:Set({Text = "AutoFarm Status: Bosses Only"})
            end
        end
    end
})

-- Current Enemy Label
local currentEnemyLabel = AutoFarmTab:CreateLabel({
    Text = "Current Enemy: None",
    Style = 1
})

-- Kill Log
AutoFarmTab:CreateSection("Kill Log")

local killLogParagraph = AutoFarmTab:CreateParagraph({
    Title = "Killed Enemies", 
    Text = "No enemies killed yet."
})

-- ###################### TOWERS TAB ######################
local TowersTab = Window:CreateTab({
    Name = "üóº Towers",
    Icon = "castle", -- Simple icon without spaces
    ImageSource = "Material",
    ShowTitle = true
})

-- Battle Tower Section
TowersTab:CreateSection("Battle Tower")

-- Battle Tower Mode
local highestStageToggle = TowersTab:CreateToggle({
    Name = "üîò Highest Stage Automatically",
    Description = "Automatically selects the highest available stage",
    CurrentValue = true,
    Callback = function(Value)
        if Value then
            -- Deactivate the slider for specific stage
            specificStageSlider:Set({Interaction = not Value})
        else
            -- Activate the slider
            specificStageSlider:Set({Interaction = true})
        end
    end
}, "HighestStageToggle")

-- Slider for specific stage
local specificStageSlider = TowersTab:CreateSlider({
    Name = "üîò Specific Stage",
    Range = {1, 50}, -- Assuming Battle Tower has 50 stages
    Increment = 1,
    CurrentValue = 1,
    Interaction = false, -- Default deactivated when Highest Stage is enabled
    Callback = function(Value)
        -- Implement stage selection logic here
    end
}, "SpecificStageSlider")

-- Start Tower Button
local battleTowerActive = false
local startTowerButton = TowersTab:CreateButton({
    Name = "Start Battle Tower",
    Description = "Start the Battle Tower",
    Callback = function()
        battleTowerActive = not battleTowerActive
        
        if battleTowerActive then
            startTowerButton:Set({Name = "Stop Battle Tower"})
            -- Start Battle Tower
            -- Update status in Dashboard
            autoTowerStatusLabel:Set({Text = "AutoTower Status: Battle Tower (Active)"})
        else
            startTowerButton:Set({Name = "Start Battle Tower"})
            -- Stop Battle Tower
            autoTowerStatusLabel:Set({Text = "AutoTower Status: Disabled"})
        end
    end
})

-- Infinite Tower Section
TowersTab:CreateSection("Infinite Tower")

-- Infinite Tower Buttons
local infiniteTowerActive = false
local infiniteTowerPaused = false

-- Start Button
local startInfiniteTowerButton = TowersTab:CreateButton({
    Name = "‚ñ∂Ô∏è Start",
    Description = "Start the Infinite Tower",
    Callback = function()
        if not infiniteTowerActive then
            infiniteTowerActive = true
            infiniteTowerPaused = false
            -- Start Infinite Tower
            -- Update status in Dashboard
            autoTowerStatusLabel:Set({Text = "AutoTower Status: Infinite Tower (Active)"})
        end
    end
})

-- Pause Button
local pauseInfiniteTowerButton = TowersTab:CreateButton({
    Name = "‚è∏Ô∏è Pause",
    Description = "Pause the Infinite Tower",
    Callback = function()
        if infiniteTowerActive and not infiniteTowerPaused then
            infiniteTowerPaused = true
            -- Pause Infinite Tower
            autoTowerStatusLabel:Set({Text = "AutoTower Status: Infinite Tower (Paused)"})
        end
    end
})

-- Stop Button
local stopInfiniteTowerButton = TowersTab:CreateButton({
    Name = "‚èπÔ∏è Stop",
    Description = "Stop the Infinite Tower",
    Callback = function()
        if infiniteTowerActive then
            infiniteTowerActive = false
            infiniteTowerPaused = false
            -- Stop Infinite Tower
            autoTowerStatusLabel:Set({Text = "AutoTower Status: Disabled"})
        end
    end
})

-- Realtime Display
local currentFloorLabel = TowersTab:CreateLabel({
    Text = "Current Floor: 0",
    Style = 1
})

local runtimeLabel = TowersTab:CreateLabel({
    Text = "Runtime: 00:00:00",
    Style = 1
})

-- AutoStart Option
local autoStartToggle = TowersTab:CreateToggle({
    Name = "AutoStart on Death/Completion",
    Description = "Automatically restart the tower",
    CurrentValue = false,
    Callback = function(Value)
        -- Implement AutoStart logic here
    end
}, "AutoStartToggle")

-- ###################### MISC TAB ######################
local MiscTab = Window:CreateTab({
    Name = "üõ†Ô∏è Misc",
    Icon = "build", -- Simple icon without spaces
    ImageSource = "Material",
    ShowTitle = true
})

-- FPS Booster
local fpsBoosterToggle = MiscTab:CreateToggle({
    Name = "‚úÖ FPS Booster",
    Description = "Increases FPS by optimizing graphics",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            -- Activate FPS Booster
            setfpscap(9999) -- Maximum FPS
            local lighting = game:GetService("Lighting")
            lighting.GlobalShadows = false
            lighting.FogEnd = 9e9
            
            -- Additional optimizations
            for _, v in pairs(workspace:GetDescendants()) do
                if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") then
                    v.Material = "Plastic"
                    v.Reflectance = 0
                end
            end
        else
            -- Deactivate FPS Booster - restore default settings
            setfpscap(60)
            local lighting = game:GetService("Lighting")
            lighting.GlobalShadows = true
            lighting.FogEnd = 100000
        end
    end
}, "FPSBoosterToggle")

-- Webhook Logger
MiscTab:CreateSection("Webhook Logger")

local webhookUrlInput = MiscTab:CreateInput({
    Name = "Discord Webhook URL",
    Description = "Enter the Discord Webhook URL",
    PlaceholderText = "https://discord.com/api/webhooks/...",
    CurrentValue = "",
    Numeric = false,
    Enter = false,
    Callback = function(Text)
        -- Save the Webhook URL
    end
}, "WebhookUrlInput")

local webhookLoggerToggle = MiscTab:CreateToggle({
    Name = "‚úÖ Webhook Logger",
    Description = "Sends logs to your Discord webhook",
    CurrentValue = false,
    Callback = function(Value)
        -- Activate/deactivate Webhook Logger
    end
}, "WebhookLoggerToggle")

-- Enemy Cooldowns
MiscTab:CreateSection("Enemy Cooldowns")

local enemyCooldownsToggle = MiscTab:CreateToggle({
    Name = "‚úÖ Show Enemy Cooldowns",
    Description = "Shows remaining time for boss respawns",
    CurrentValue = false,
    Callback = function(Value)
        -- Activate/deactivate Enemy Cooldowns
    end
}, "EnemyCooldownsToggle")

-- Enemy Cooldown List
local enemyCooldownsParagraph = MiscTab:CreateParagraph({
    Title = "Remaining Cooldowns", 
    Text = "Enable 'Show Enemy Cooldowns' to see the list."
})

-- ###################### SETTINGS TAB ######################
local SettingsTab = Window:CreateTab({
    Name = "‚öôÔ∏è Settings",
    Icon = "settings", -- Simple icon without spaces
    ImageSource = "Material",
    ShowTitle = true
})

-- Add Theme Section
SettingsTab:BuildThemeSection()

-- Add Configuration Section
SettingsTab:BuildConfigSection()

-- UI Toggle Keybind
local UIBind = SettingsTab:CreateBind({
    Name = "Toggle UI",
    Description = "Press this key to show/hide the UI",
    CurrentBind = "RightControl",
    HoldToInteract = false,
    Callback = function() end,
    OnChangedCallback = function(Bind)
        Window.Bind = Bind
    end,
}, "UIToggleKeybind")

-- IMPORTANT: Load auto-configuration (must be at the end!)
Luna:LoadAutoloadConfig()
